const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const { config } = require('../config');
const { logger } = require('../utils/logger');
const VideoProcessor = require('../services/videoProcessor');
const FacebookReelsService = require('../services/facebookReelsService');

class TelegramBotController {
  constructor() {
    // Singleton pattern - return existing instance if already created
    if (TelegramBotController.instance) {
      return TelegramBotController.instance;
    }
    
    this.bot = null;
    this.isInitialized = false;
    this.videoProcessor = new VideoProcessor();
    this.facebookReelsService = new FacebookReelsService();
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏≠ description
    this.pendingVideos = new Map(); // videoFileId -> { videoPath, userId, chatId, timestamp }
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î pending videos ‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(() => {
      this.cleanupPendingVideos();
    }, 5 * 60 * 1000);
    
    // Store the instance
    TelegramBotController.instance = this;
    
    // Initialize asynchronously
    this.initializeBot();
  }

  // Static method to get instance
  static getInstance() {
    if (!TelegramBotController.instance) {
      TelegramBotController.instance = new TelegramBotController();
    }
    return TelegramBotController.instance;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö initialize bot
  async initializeBot() {
    try {
      // Clear webhook ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° polling
      await this.clearWebhook();
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Telegram Bot client ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ polling ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
      this.bot = new TelegramBot(config.telegram.botToken, { 
        polling: {
          interval: 2000,        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1000ms ‡πÄ‡∏õ‡πá‡∏ô 2000ms ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà polling
          autoStart: true,
          params: {
            timeout: 20,         // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 10s ‡πÄ‡∏õ‡πá‡∏ô 20s ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏Ç‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏≠ response ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
            limit: 100,         // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô messages ‡∏ï‡πà‡∏≠ request
            allowed_updates: ['message', 'callback_query'] // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó updates ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ö
          }
        },
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ request timeout
        request: {
          timeout: 30000,      // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTP request timeout
          agent: false,        // ‡πÉ‡∏ä‡πâ global agent
          forever: true        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ keep-alive connections
        }
      });
      
      this.setupHandlers();
      this.isInitialized = true;
      logger.info('Telegram Bot initialized successfully');
    } catch (error) {
      logger.error('Error initializing Telegram Bot:', error);
      this.isInitialized = false;
    }
  }

  // Clear webhook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô conflict
  async clearWebhook() {
    try {
      const response = await axios.post(
        `https://api.telegram.org/bot${config.telegram.botToken}/deleteWebhook`
      );
      logger.info('Webhook cleared successfully');
    } catch (error) {
      logger.warn('Failed to clear webhook:', error.message);
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ handlers
  setupHandlers() {
    // Handle text messages
    this.bot.on('message', (msg) => {
      this.handleMessage(msg);
    });

    // Handle video messages
    this.bot.on('video', (msg) => {
      this.handleVideoMessage(msg);
    });

    // Handle errors
    this.bot.on('error', (error) => {
      logger.error('Telegram Bot error:', error);
    });

    // Handle polling errors ‡πÅ‡∏ö‡∏ö graceful ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ETIMEDOUT ‡πÅ‡∏•‡∏∞ network errors
    this.bot.on('polling_error', (error) => {
      if (error.code === 'ETELEGRAM' && error.response?.statusCode === 409) {
        logger.warn('Telegram Bot conflict detected - another instance might be running');
        logger.info('Attempting to restart polling in 5 seconds...');
        setTimeout(() => {
          this.restartPolling();
        }, 5000);
      } else if (error.code === 'EFATAL' || error.message?.includes('ETIMEDOUT') || error.message?.includes('read ETIMEDOUT')) {
        logger.warn('Telegram API timeout detected (ETIMEDOUT) - network connection issue');
        logger.info('Attempting to restart polling in 10 seconds...');
        setTimeout(() => {
          this.restartPolling();
        }, 10000);
      } else if (error.code === 'ECONNRESET' || error.code === 'ECONNREFUSED') {
        logger.warn('Network connection error detected - will retry connection');
        logger.info('Attempting to restart polling in 15 seconds...');
        setTimeout(() => {
          this.restartPolling();
        }, 15000);
      } else {
        logger.error('Telegram Bot polling error (unknown):', error);
        logger.info('Attempting to restart polling in 30 seconds...');
        setTimeout(() => {
          this.restartPolling();
        }, 30000);
      }
    });

    logger.info('Telegram Bot handlers setup completed');
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö restart polling
  async restartPolling() {
    try {
      await this.bot.stopPolling();
      await new Promise(resolve => setTimeout(resolve, 2000));
      await this.bot.startPolling();
      logger.info('Telegram Bot polling restarted successfully');
    } catch (error) {
      logger.error('Failed to restart polling:', error);
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  async handleMessage(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
      logger.info('Received Telegram message:', { 
        chatId, 
        userId,
        messageType: msg.video ? 'video' : 'text',
        text: msg.text 
      });

      if (msg.video) {
        return await this.handleVideoMessage(msg);
      } else if (msg.text) {
        return await this.handleTextMessage(msg);
      }
    } catch (error) {
      logger.error('Error handling Telegram message:', error);
      await this.sendMessage(chatId, '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö');
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
  async handleVideoMessage(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const videoFileId = msg.video.file_id;

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡πâ‡∏ß
      await this.sendMessage(chatId, 'üìπ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î...');

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Telegram
      logger.info('Starting video download from Telegram:', { videoFileId, userId });
      
      const videoPath = await this.downloadVideo(videoFileId);
      
      logger.info('Video downloaded successfully:', { videoPath, videoFileId });

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
      const processedVideoPath = await this.videoProcessor.processVideoForReels(videoPath);
      
      logger.info('Video processed for Reels:', { processedVideoPath });

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠ description
      this.pendingVideos.set(videoFileId, {
        videoPath: processedVideoPath,
        userId: userId,
        chatId: chatId,
        timestamp: new Date(),
        originalMessageId: videoFileId
      });

      // ‡∏ñ‡∏≤‡∏° description ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      await this.sendMessage(chatId, 
        '‚ú® ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ (description) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏•‡∏¥‡∏õ‡∏ô‡∏µ‡πâ\n\nüìù ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠\nüöÄ ‡∏û‡∏¥‡∏°‡∏û‡πå "skip" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢'
      );

    } catch (error) {
      logger.error('Error processing video message:', error);
      
      await this.sendMessage(chatId, '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö');
    }
  }

  // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
  async handleTextMessage(msg) {
    const chatId = msg.chat.id;
    const text = msg.text.toLowerCase();
    const userId = msg.from.id;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏£‡∏≠ description ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (this.pendingVideos.size > 0) {
      // ‡∏´‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö userId ‡∏ô‡∏µ‡πâ
      let pendingVideo = null;
      let videoFileId = null;
      
      for (const [fileId, videoData] of this.pendingVideos.entries()) {
        if (videoData.userId === userId && videoData.chatId === chatId) {
          pendingVideo = videoData;
          videoFileId = fileId;
          break;
        }
      }
      
      if (pendingVideo) {
        let description = msg.text;
        
        // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "skip" ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ description ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if (text === 'skip') {
          description = '‡∏Ñ‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö';
          await this.sendMessage(chatId, '‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô');
        } else {
          await this.sendMessage(chatId, `‚ú® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß: "${description}"`);
        }
        
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        this.pendingVideos.delete(videoFileId);
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏° description
        await this.sendMessage(chatId, 'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Facebook Reels ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö...');
        
        // ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook Reels
        await this.facebookReelsService.queueReelsPosting({
          videoPath: pendingVideo.videoPath,
          originalMessageId: pendingVideo.originalMessageId,
          userId: pendingVideo.userId,
          chatId: pendingVideo.chatId,
          timestamp: pendingVideo.timestamp,
          description: description // ‡πÄ‡∏û‡∏¥‡πà‡∏° description
        });
        
        return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
      }
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (text === '/help' || text === 'help' || text === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') {
      return await this.sendMessage(chatId, 
        `ü§ñ Telegram Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook Reels\n\nüìπ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n1. ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà\n2. ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢\n3. ‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏û‡∏¥‡∏°‡∏û‡πå "skip"\n4. ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Facebook Page ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\nüí´ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n- "/help" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n- "/status" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö`
      );
    }

    if (text === '/status' || text === 'status' || text === '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') {
      const systemStatus = await this.getSystemStatus();
      return await this.sendMessage(chatId, systemStatus);
    }

    if (text === '/start') {
      return await this.sendMessage(chatId, 
        `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Telegram Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook Reels!\n\nüìπ ‡∏™‡πà‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Facebook Reels ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\nüí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå "/help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`
      );
    }

    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    return await this.sendMessage(chatId, 
      `ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Facebook Reels ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n\nüìπ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Facebook Page ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏¢!\n\nüí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå "/help" ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`
    );
  }

  // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Telegram (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
  async downloadVideo(fileId) {
    try {
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å Telegram API
      const fileInfo = await this.bot.getFile(fileId);
      logger.info('Retrieved Telegram file info:', { 
        fileId, 
        filePath: fileInfo.file_path,
        fileSize: fileInfo.file_size 
      });
      
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
      const fileUrl = `https://api.telegram.org/file/bot${config.telegram.botToken}/${fileInfo.file_path}`;
      
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
      const timestamp = Date.now();
      const fileExtension = path.extname(fileInfo.file_path) || '.mp4';
      const fileName = `telegram_${fileId}_${timestamp}${fileExtension}`;
      const localFilePath = path.join(config.upload.path, 'temp', fileName);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      await fs.ensureDir(path.dirname(localFilePath));
      
      logger.info('Starting video download from Telegram:', { 
        fileUrl: fileUrl.replace(config.telegram.botToken, '[HIDDEN]'),
        localFilePath,
        expectedSize: fileInfo.file_size
      });
      
      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢ axios stream (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß)
      const response = await axios({
        method: 'GET',
        url: fileUrl,
        responseType: 'stream',
        timeout: 3 * 60 * 1000, // ‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 3 ‡∏ô‡∏≤‡∏ó‡∏µ timeout
        maxContentLength: Infinity,
        maxBodyLength: Infinity,
        maxRedirects: 5
      });
      
      const writeStream = fs.createWriteStream(localFilePath);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏ß progress tracking
      let downloadedBytes = 0;
      const totalBytes = fileInfo.file_size || 0;
      
      response.data.on('data', (chunk) => {
        downloadedBytes += chunk.length;
        if (totalBytes > 0) {
          const progress = Math.round((downloadedBytes / totalBytes) * 100);
          if (progress % 10 === 0) { // log ‡∏ó‡∏∏‡∏Å 10%
            logger.info(`Download progress: ${progress}% (${Math.round(downloadedBytes/1024/1024)}MB/${Math.round(totalBytes/1024/1024)}MB)`);
          }
        }
      });
      
      response.data.pipe(writeStream);
      
      return new Promise((resolve, reject) => {
        writeStream.on('finish', () => {
          logger.info('Video downloaded successfully from Telegram:', { 
            localFilePath, 
            downloadedSize: downloadedBytes,
            fileId
          });
          resolve(localFilePath);
        });
        
        writeStream.on('error', (error) => {
          logger.error('Error writing downloaded video file:', error);
          // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          fs.remove(localFilePath).catch(() => {});
          reject(error);
        });
        
        response.data.on('error', (error) => {
          logger.error('Error downloading video from Telegram:', error);
          fs.remove(localFilePath).catch(() => {});
          reject(error);
        });
      });
      
    } catch (error) {
      logger.error('Error getting video file info from Telegram:', error);
      throw error;
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram
  async sendMessage(chatId, text) {
    try {
      // Check if bot is initialized
      if (!this.bot || !this.isInitialized) {
        logger.warn('Bot not initialized yet, waiting...');
        // Wait for bot to be initialized (max 10 seconds)
        let attempts = 0;
        while ((!this.bot || !this.isInitialized) && attempts < 50) {
          await new Promise(resolve => setTimeout(resolve, 200));
          attempts++;
        }
        
        if (!this.bot || !this.isInitialized) {
          throw new Error('Telegram bot not initialized after waiting');
        }
      }
      
      return await this.bot.sendMessage(chatId, text);
    } catch (error) {
      logger.error('Error sending Telegram message:', error);
      throw error;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
  async getSystemStatus() {
    try {
      const enabledPagesCount = await this.facebookReelsService.getEnabledPagesCount();
      const queueStatus = await this.facebookReelsService.getQueueStatus();
      
      return `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:\n\nüî∏ Facebook Pages: ${enabledPagesCount} ‡πÄ‡∏û‡∏à (‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)\nüî∏ ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß: ${queueStatus.waiting} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\nüî∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: ${queueStatus.active} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\nüî∏ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ${queueStatus.completed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\nüî∏ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${queueStatus.failed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`;
    } catch (error) {
      logger.error('Error getting system status:', error);
      return '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ';
    }
  }

  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î pending videos ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  cleanupPendingVideos() {
    const now = new Date();
    const maxAge = 10 * 60 * 1000; // 10 ‡∏ô‡∏≤‡∏ó‡∏µ
    
    for (const [fileId, videoData] of this.pendingVideos.entries()) {
      if (now - videoData.timestamp > maxAge) {
        logger.info('Cleaning up expired pending video:', { fileId, userId: videoData.userId });
        this.pendingVideos.delete(fileId);
        
        // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå
        try {
          fs.remove(videoData.videoPath).catch(() => {});
        } catch (error) {
          logger.warn('Failed to cleanup pending video file:', error.message);
        }
      }
    }
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  async notifyPostingComplete(chatId, result) {
    try {
      const { successful, failed, total } = result;
      
      let message = `üéâ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n\n`;
      message += `‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successful}/${total} ‡πÄ‡∏û‡∏à\n`;
      
      if (failed > 0) {
        message += `‚ùå ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${failed} ‡πÄ‡∏û‡∏à\n`;
      }
      
      message += `\nüì± ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á Facebook Page ‡∏ó‡∏±‡πâ‡∏á ${successful} ‡πÄ‡∏û‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n`;
      message += `üîÑ ‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏•‡∏∞‡πÄ‡∏û‡∏à‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö`;

      await this.sendMessage(chatId, message);
    } catch (error) {
      logger.error('Error sending posting complete notification:', error);
    }
  }

  // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  async notifyPostingError(chatId, error) {
    try {
      await this.sendMessage(chatId, 
        `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå Facebook Reels\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${error.message}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏±‡∏ö`
      );
    } catch (error) {
      logger.error('Error sending posting error notification:', error);
    }
  }
}

// Static instance for singleton pattern
TelegramBotController.instance = null;

module.exports = TelegramBotController;